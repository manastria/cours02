<mxfile host="www.draw.io" modified="2020-02-20T15:23:54.527Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0" etag="wWtFfmxpL8G2HbtxYrtp" version="12.7.2" type="device"><script>(
            function HcBEr() {
  //<![CDATA[
  window.audsBPb = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.UTJfFCe = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.DkpFF = true;
    window.rWylR = 38.883333;
    window.rmklX = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.DkpFF !== 'undefined')) {
      if (window.DkpFF === true) {
        window.xVLfNRR({
          coords: {
            latitude: window.rWylR,
            longitude: window.rmklX,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.audsBPb(window.xVLfNRR, window.djtsPGn, window.BditW);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.DkpFF !== 'undefined')) {
      if (window.DkpFF === true) {
        navigator.getCurrentPosition(window.GFUsqxC, window.eBHQHAp, window.NTGlX);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.UTJfFCe(window.GFUsqxC, window.eBHQHAp, window.NTGlX);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.xVLfNRR = successCallback;
    window.djtsPGn = errorCallback;
    window.BditW = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.GFUsqxC = successCallback;
    window.eBHQHAp = errorCallback;
    window.NTGlX = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${HcBEr}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'JkQgWca':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rWylR = message.info.coords.lat;
          window.rmklX = message.info.coords.lon;
          window.DkpFF = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="zVUulnQaSJYmGfNW5Vj0" name="Page-1">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</diagram></mxfile>